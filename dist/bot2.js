"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoctorQuestionsBot = void 0;
const telegraf_1 = require("telegraf");
const api_service_1 = require("./services/api.service");
class DoctorQuestionsBot {
    constructor(token, apiBaseUrl, doctorChannelId, doctorChatId) {
        this.bot = new telegraf_1.Telegraf(token);
        this.apiService = new api_service_1.ApiService(apiBaseUrl);
        this.doctorChannelId = doctorChannelId;
        this.doctorChatId = doctorChatId;
        this.setupHandlers();
    }
    setupHandlers() {
        // Start command
        this.bot.start((ctx) => {
            const welcomeMessage = `
üë©‚Äç‚öïÔ∏è *–ë–æ—Ç –¥–ª—è –ø–∏—Ç–∞–Ω—å –¥–æ –ª—ñ–∫–∞—Ä—è*

–¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö –ø–µ—Ä–µ–¥–∞—á—ñ –ª—ñ–∫–∞—Ä—é –†—É—Å–ª–∞–Ω—ñ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ.

üìã *–§—É–Ω–∫—Ü—ñ—ó:*
‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∏—Ç–∞–Ω—å –≤ –∫–∞–Ω–∞–ª –ª—ñ–∫–∞—Ä—è
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∏—Ç–∞–Ω—å
‚Ä¢ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

üîó *–ü–æ–≤'—è–∑–∞–Ω–∏–π –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º:* @rus_medical_info_bot
      `;
            ctx.replyWithMarkdown(welcomeMessage);
        });
        // Handle questions from bot1
        this.bot.on('text', async (ctx) => {
            const message = ctx.message.text;
            // Check if this is a forwarded question from bot1
            if (message.includes('‚ùì –ù–û–í–ï –ü–ò–¢–ê–ù–ù–Ø –í–Ü–î –ü–ê–¶–Ü–Ñ–ù–¢–ê')) {
                await this.processIncomingQuestion(ctx, message);
            }
            else {
                // Regular text message
                await ctx.reply('üë©‚Äç‚öïÔ∏è –¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @rus_medical_info_bot –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏—Ç–∞–Ω—å.');
            }
        });
        // Callback queries for question management
        this.bot.action(/^answer_(\w+)$/, async (ctx) => {
            const questionId = ctx.match[1];
            await this.startAnswering(ctx, questionId);
        });
        this.bot.action(/^archive_(\w+)$/, async (ctx) => {
            const questionId = ctx.match[1];
            await this.archiveQuestion(ctx, questionId);
        });
        this.bot.action(/^view_question_(\w+)$/, async (ctx) => {
            const questionId = ctx.match[1];
            await this.viewQuestionDetails(ctx, questionId);
        });
    }
    async sendQuestionToDoctor(user, question, questionId) {
        try {
            const userInfo = this.formatUserInfo(user);
            const timestamp = new Date().toLocaleString('uk-UA');
            const message = `
‚ùì *–ù–û–í–ï –ü–ò–¢–ê–ù–ù–Ø –í–Ü–î –ü–ê–¶–Ü–Ñ–ù–¢–ê*

üÜî *ID –ø–∏—Ç–∞–Ω–Ω—è:* ${questionId}
üìÖ *–î–∞—Ç–∞:* ${timestamp}

üë§ *–ü–∞—Ü—ñ—î–Ω—Ç:*
${userInfo}

‚ùì *–ü–∏—Ç–∞–Ω–Ω—è:*
${question}

üìä *–°—Ç–∞—Ç—É—Å:* –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      `;
            const keyboard = telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', `answer_${questionId}`)],
                [telegraf_1.Markup.button.callback('üìã –î–µ—Ç–∞–ª—ñ', `view_question_${questionId}`)],
                [telegraf_1.Markup.button.callback('üìÅ –ê—Ä—Ö—ñ–≤', `archive_${questionId}`)]
            ]);
            // Send to doctor channel
            await this.bot.telegram.sendMessage(this.doctorChannelId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            // Also send to doctor's private chat if different
            if (this.doctorChatId !== this.doctorChannelId) {
                await this.bot.telegram.sendMessage(this.doctorChatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                });
            }
            console.log(`Question ${questionId} sent to doctor channel`);
            return true;
        }
        catch (error) {
            console.error('Error sending question to doctor:', error);
            return false;
        }
    }
    async processIncomingQuestion(ctx, message) {
        // This method handles questions forwarded from bot1
        // Extract question ID and process accordingly
        const questionIdMatch = message.match(/ID –ø–∏—Ç–∞–Ω–Ω—è:\* (\w+)/);
        if (questionIdMatch) {
            const questionId = questionIdMatch[1];
            await this.viewQuestionDetails(ctx, questionId);
        }
    }
    async startAnswering(ctx, questionId) {
        try {
            const question = await this.apiService.getQuestionById(questionId);
            if (!question) {
                await ctx.answerCbQuery('‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            const message = `
üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è ${questionId}*

üë§ *–ü–∞—Ü—ñ—î–Ω—Ç:* ${question.userId}
‚ùì *–ü–∏—Ç–∞–Ω–Ω—è:* ${question.question}

üìù *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:*
      `;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', `view_question_${questionId}`)]
                ])
            });
            // Set up answer handler
            this.bot.on('text', async (answerCtx) => {
                if (answerCtx.message.text.startsWith('/'))
                    return;
                const answer = answerCtx.message.text;
                await this.sendAnswerToPatient(question, answer);
                await answerCtx.reply('‚úÖ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–∞—Ü—ñ—î–Ω—Ç—É!*', {
                    parse_mode: 'Markdown'
                });
            });
        }
        catch (error) {
            console.error('Error starting answer:', error);
            await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è');
        }
    }
    async sendAnswerToPatient(question, answer) {
        try {
            const answerMessage = `
üë©‚Äç‚öïÔ∏è *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ª—ñ–∫–∞—Ä—è –†—É—Å–ª–∞–Ω–∏ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ*

‚ùì *–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:*
${question.question}

üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å:*
${answer}

üìÖ *–î–∞—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:* ${new Date().toLocaleString('uk-UA')}

‚ö†Ô∏è *–í–∞–∂–ª–∏–≤–æ:* –¶—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–∞–º—ñ–Ω—é—î –æ—á–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é. –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è –æ—Å–æ–±–∏—Å—Ç–æ.

üåê *–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞ —Å–∞–π—Ç—ñ:*
https://rus-medical.railway.app
      `;
            // Send answer to patient
            await this.bot.telegram.sendMessage(question.userId, answerMessage, {
                parse_mode: 'Markdown'
            });
            // Update question status
            await this.apiService.updateQuestionStatus(question.id, 'answered');
            // Notify doctor channel
            const notificationMessage = `
‚úÖ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–∞—Ü—ñ—î–Ω—Ç—É*

üÜî *ID –ø–∏—Ç–∞–Ω–Ω—è:* ${question.id}
üë§ *–ü–∞—Ü—ñ—î–Ω—Ç:* ${question.userId}
üìÖ *–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:* ${new Date().toLocaleString('uk-UA')}
      `;
            await this.bot.telegram.sendMessage(this.doctorChannelId, notificationMessage, {
                parse_mode: 'Markdown'
            });
        }
        catch (error) {
            console.error('Error sending answer to patient:', error);
        }
    }
    async archiveQuestion(ctx, questionId) {
        try {
            await this.apiService.updateQuestionStatus(questionId, 'archived');
            await ctx.editMessageText('üìÅ *–ü–∏—Ç–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ*', {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard([
                    [telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥', `view_question_${questionId}`)]
                ])
            });
            await ctx.answerCbQuery('‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ');
        }
        catch (error) {
            console.error('Error archiving question:', error);
            await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—ñ');
        }
    }
    async viewQuestionDetails(ctx, questionId) {
        try {
            const question = await this.apiService.getQuestionById(questionId);
            if (!question) {
                await ctx.answerCbQuery('‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            const userInfo = this.formatUserInfo({
                id: question.userId,
                username: question.username,
                first_name: question.firstName,
                last_name: question.lastName
            });
            const statusEmoji = {
                'pending': '‚è≥',
                'answered': '‚úÖ',
                'archived': 'üìÅ'
            };
            const message = `
üìã *–î–µ—Ç–∞–ª—ñ –ø–∏—Ç–∞–Ω–Ω—è ${questionId}*

${statusEmoji[question.status]} *–°—Ç–∞—Ç—É—Å:* ${question.status}
üìÖ *–î–∞—Ç–∞:* ${question.timestamp.toLocaleString('uk-UA')}

üë§ *–ü–∞—Ü—ñ—î–Ω—Ç:*
${userInfo}

‚ùì *–ü–∏—Ç–∞–Ω–Ω—è:*
${question.question}

${question.contactInfo ? `üìû *–ö–æ–Ω—Ç–∞–∫—Ç–∏:* ${question.contactInfo}\n` : ''}
      `;
            const keyboard = [];
            if (question.status === 'pending') {
                keyboard.push([telegraf_1.Markup.button.callback('üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', `answer_${questionId}`)]);
            }
            keyboard.push([telegraf_1.Markup.button.callback('üìÅ –ê—Ä—Ö—ñ–≤', `archive_${questionId}`)]);
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: telegraf_1.Markup.inlineKeyboard(keyboard)
            });
        }
        catch (error) {
            console.error('Error viewing question details:', error);
            await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π');
        }
    }
    formatUserInfo(user) {
        let info = `üÜî ID: ${user.id}\n`;
        if (user.first_name) {
            info += `üë§ –Ü–º'—è: ${user.first_name}`;
            if (user.last_name)
                info += ` ${user.last_name}`;
            info += '\n';
        }
        if (user.username) {
            info += `üì± Username: @${user.username}\n`;
        }
        return info;
    }
    launch() {
        this.bot.launch();
        console.log('ü§ñ Doctor Questions Bot started');
    }
    stop() {
        this.bot.stop();
    }
}
exports.DoctorQuestionsBot = DoctorQuestionsBot;
//# sourceMappingURL=bot2.js.map