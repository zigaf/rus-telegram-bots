"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArticleSearchBot = void 0;
const telegraf_1 = require("telegraf");
const api_service_1 = require("./services/api.service");
class ArticleSearchBot {
    constructor(token, apiBaseUrl, frontendUrl) {
        this.bot = new telegraf_1.Telegraf(token);
        this.apiService = new api_service_1.ApiService(apiBaseUrl);
        this.frontendUrl = frontendUrl;
        this.setupHandlers();
    }
    setupHandlers() {
        // Start command
        this.bot.start((ctx) => {
            const welcomeMessage = `
üè• *–í—ñ—Ç–∞—î–º–æ –≤ –º–µ–¥–∏—á–Ω–æ–º—É –±–æ—Ç—ñ –†—É—Å–ª–∞–Ω–∏ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ!*

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ:
‚Ä¢ –†–∞–∫ –ª–µ–≥–µ–Ω—å —Ç–∞ –π–æ–≥–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ –°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫—É –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å
‚Ä¢ –•—ñ—Ä—É—Ä–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
‚Ä¢ –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è

üîç *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:*
‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
‚Ä¢ –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è"

_–õ—ñ–∫–∞—Ä-–æ–Ω–∫–æ–ª–æ–≥ –†—É—Å–ª–∞–Ω–∞ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ —Ç–æ—Ä–∞–∫–∞–ª—å–Ω—ñ–π —Ö—ñ—Ä—É—Ä–≥—ñ—ó —Ç–∞ –æ–Ω–∫–æ–ª–æ–≥—ñ—ó –ª–µ–≥–µ–Ω—å._
      `;
            ctx.replyWithMarkdown(welcomeMessage, this.getMainKeyboard());
        });
        // Help command
        this.bot.help((ctx) => {
            const helpMessage = `
üìñ *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É*

üîç *–ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π:*
‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
‚Ä¢ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å–∏–º–ø—Ç–æ–º–∏ —Ä–∞–∫—É", "–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ª—ñ–∫—É–≤–∞–Ω–Ω—è"

üìã *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç–∞—Ç–µ–π:*
‚Ä¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ –õ—ñ–∫—É–≤–∞–Ω–Ω—è  
‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞
‚Ä¢ –•—ñ—Ä—É—Ä–≥—ñ—è
‚Ä¢ –Ü–Ω–Ω–æ–≤–∞—Ü—ñ—ó
‚Ä¢ –†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—è

‚ùì *–Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:*
‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è"
‚Ä¢ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ–∫—Ç–æ—Ä—É
‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å

üåê *–ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞ —Å–∞–π—Ç—ñ:*
${this.frontendUrl}
      `;
            ctx.replyWithMarkdown(helpMessage, this.getMainKeyboard());
        });
        // Text messages - search articles
        this.bot.on('text', async (ctx) => {
            const query = ctx.message.text;
            if (query === 'üîç –ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π' || query === 'üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó' || query === '‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è') {
                return; // Handle these in callback queries
            }
            await ctx.reply('üîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...', { reply_markup: { remove_keyboard: true } });
            try {
                const articles = await this.apiService.searchArticles(query);
                if (articles.length === 0) {
                    const noResultsMessage = `
üòî *–ù–µ –∑–Ω–∞–π—à–æ–≤ —Å—Ç–∞—Ç–µ–π –∑–∞ –∑–∞–ø–∏—Ç–æ–º: "${query}"*

üí° *–°–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç–∞—Ç–µ–π
‚Ä¢ –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ

‚ùì *–ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è* - –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
          `;
                    ctx.replyWithMarkdown(noResultsMessage, this.getNoResultsKeyboard());
                }
                else {
                    await this.sendSearchResults(ctx, articles, query);
                }
            }
            catch (error) {
                console.error('Search error:', error);
                ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', this.getMainKeyboard());
            }
        });
        // Callback queries
        this.bot.action(/^article_(\d+)$/, async (ctx) => {
            const articleId = parseInt(ctx.match[1]);
            await this.showArticle(ctx, articleId);
        });
        this.bot.action('search_articles', (ctx) => {
            ctx.reply('üîç –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É —Å—Ç–∞—Ç–µ–π:', { reply_markup: { remove_keyboard: true } });
        });
        this.bot.action('categories', async (ctx) => {
            await this.showCategories(ctx);
        });
        this.bot.action(/^category_(.+)$/, async (ctx) => {
            const category = ctx.match[1];
            await this.showCategoryArticles(ctx, category);
        });
        this.bot.action('ask_doctor', async (ctx) => {
            await this.askDoctorQuestion(ctx);
        });
        this.bot.action('back_to_main', (ctx) => {
            ctx.editMessageText('üè• *–ú–µ–¥–∏—á–Ω–∏–π –±–æ—Ç –†—É—Å–ª–∞–Ω–∏ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ*', {
                parse_mode: 'Markdown',
                reply_markup: this.getMainInlineKeyboard()
            });
        });
    }
    async sendSearchResults(ctx, articles, query) {
        const message = `üîç *–ó–Ω–∞–π—à–æ–≤ ${articles.length} —Å—Ç–∞—Ç–µ–π –∑–∞ –∑–∞–ø–∏—Ç–æ–º: "${query}"*\n\n`;
        let text = message;
        const keyboard = [];
        for (let i = 0; i < Math.min(articles.length, 5); i++) {
            const article = articles[i];
            text += `${i + 1}. *${article.title}*\n`;
            text += `üìÖ ${article.date} ‚Ä¢ ‚è± ${article.readTime}\n`;
            text += `üìù ${article.excerpt}\n\n`;
            keyboard.push([telegraf_1.Markup.button.callback(`üìñ ${article.title}`, `article_${article.id}`)]);
        }
        if (articles.length > 5) {
            text += `\n_–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∑ ${articles.length} —Å—Ç–∞—Ç–µ–π. –£—Ç–æ—á–Ω—ñ—Ç—å –ø–æ—à—É–∫ –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤._`;
        }
        keyboard.push([telegraf_1.Markup.button.callback('‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è', 'ask_doctor')]);
        keyboard.push([telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]);
        await ctx.replyWithMarkdown(text, { reply_markup: { inline_keyboard: keyboard } });
    }
    async showArticle(ctx, articleId) {
        try {
            const article = await this.apiService.getArticleById(articleId);
            if (!article) {
                await ctx.answerCbQuery('‚ùå –°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            let text = `üìñ *${article.title}*\n\n`;
            text += `üìÖ ${article.date} ‚Ä¢ ‚è± ${article.readTime}\n`;
            text += `üè∑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${article.category}\n\n`;
            text += `üìù *–í—Å—Ç—É–ø:*\n${article.content.intro}\n\n`;
            if (article.content.sections.length > 0) {
                text += `üìã *–û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:*\n`;
                article.content.sections.forEach((section, index) => {
                    text += `${index + 1}. ${section.heading}\n`;
                });
            }
            text += `\nüåê *–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—É —Å—Ç–∞—Ç—Ç—é –Ω–∞ —Å–∞–π—Ç—ñ:*\n${this.frontendUrl}/article/${article.id}`;
            const keyboard = [
                [telegraf_1.Markup.button.url('üåê –ß–∏—Ç–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ', `${this.frontendUrl}/article/${article.id}`)],
                [telegraf_1.Markup.button.callback('‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è', 'ask_doctor')],
                [telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –ø–æ—à—É–∫—É', 'back_to_main')]
            ];
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        }
        catch (error) {
            console.error('Error showing article:', error);
            await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ');
        }
    }
    async showCategories(ctx) {
        const categories = [
            { name: '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', emoji: 'üîç', desc: '–ú–µ—Ç–æ–¥–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∫—É –ª–µ–≥–µ–Ω—å' },
            { name: '–õ—ñ–∫—É–≤–∞–Ω–Ω—è', emoji: 'üíä', desc: '–°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—è' },
            { name: '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞', emoji: 'üõ°', desc: '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å' },
            { name: '–•—ñ—Ä—É—Ä–≥—ñ—è', emoji: '‚öïÔ∏è', desc: '–•—ñ—Ä—É—Ä–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏' },
            { name: '–Ü–Ω–Ω–æ–≤–∞—Ü—ñ—ó', emoji: 'üöÄ', desc: '–ù–æ–≤—ñ—Ç–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó' },
            { name: '–†–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—è', emoji: 'üè•', desc: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è' }
        ];
        let text = 'üìã *–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç–∞—Ç–µ–π:*\n\n';
        const keyboard = [];
        for (const category of categories) {
            text += `${category.emoji} *${category.name}*\n${category.desc}\n\n`;
            keyboard.push([telegraf_1.Markup.button.callback(`${category.emoji} ${category.name}`, `category_${category.name}`)]);
        }
        keyboard.push([telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]);
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });
    }
    async showCategoryArticles(ctx, category) {
        try {
            const articles = await this.apiService.getArticles();
            const categoryArticles = articles.filter(article => article.category === category);
            if (categoryArticles.length === 0) {
                await ctx.editMessageText(`üòî *–í –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "${category}" –ø–æ–∫–∏ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–µ–π.*`, {
                    parse_mode: 'Markdown',
                    reply_markup: telegraf_1.Markup.inlineKeyboard([
                        [telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', 'categories')]
                    ])
                });
                return;
            }
            let text = `üìã *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}*\n\n`;
            const keyboard = [];
            for (const article of categoryArticles.slice(0, 5)) {
                text += `üìñ *${article.title}*\n`;
                text += `üìÖ ${article.date} ‚Ä¢ ‚è± ${article.readTime}\n\n`;
                keyboard.push([telegraf_1.Markup.button.callback(`üìñ ${article.title}`, `article_${article.id}`)]);
            }
            keyboard.push([telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', 'categories')]);
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        }
        catch (error) {
            console.error('Error showing category articles:', error);
            await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–µ–π');
        }
    }
    async askDoctorQuestion(ctx) {
        const message = `
‚ùì *–ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è*

–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —Å—Ç–∞—Ç—Ç—è—Ö, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ–∫—Ç–æ—Ä—É –†—É—Å–ª–∞–Ω—ñ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ.

üìù *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:*
‚Ä¢ –û–ø–∏—à—ñ—Ç—å —Å–∏–º–ø—Ç–æ–º–∏ –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É
‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—Ç–µ–ª–µ—Ñ–æ–Ω, email)
‚Ä¢ –î–æ–¥–∞–π—Ç–µ –±—É–¥—å-—è–∫—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é

üí¨ *–ü—Ä–∏–∫–ª–∞–¥:*
"–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –£ –º–µ–Ω–µ —Ç—Ä–∏–≤–∞–ª–∏–π –∫–∞—à–µ–ª—å –ø—Ä–æ—Ç—è–≥–æ–º 2 —Ç–∏–∂–Ω—ñ–≤. –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è? –ú—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω: +380123456789"

‚è∞ *–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:* 24-48 –≥–æ–¥–∏–Ω
    `;
        await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: telegraf_1.Markup.inlineKeyboard([
                [telegraf_1.Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
            ])
        });
        // Set up question handler
        this.bot.on('text', async (questionCtx) => {
            if (questionCtx.message.text.startsWith('/'))
                return;
            const question = questionCtx.message.text;
            const user = questionCtx.from;
            // Send to doctor channel via bot2
            await this.sendQuestionToDoctor(user, question);
            await questionCtx.reply('‚úÖ *–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ª—ñ–∫–∞—Ä—é!*\n\n‚è∞ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º 24-48 –≥–æ–¥–∏–Ω.\n\nüí° –ê –ø–æ–∫–∏ —â–æ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ:', {
                parse_mode: 'Markdown',
                reply_markup: this.getMainInlineKeyboard()
            });
        });
    }
    async sendQuestionToDoctor(user, question) {
        // This will be handled by bot2 integration
        console.log('Question from user:', { user, question });
        // TODO: Send to doctor channel via bot2
    }
    getMainKeyboard() {
        return telegraf_1.Markup.keyboard([
            ['üîç –ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π', 'üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'],
            ['‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è']
        ]).resize();
    }
    getMainInlineKeyboard() {
        return telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('üîç –ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π', 'search_articles')],
            [telegraf_1.Markup.button.callback('üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó', 'categories')],
            [telegraf_1.Markup.button.callback('‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è', 'ask_doctor')]
        ]);
    }
    getNoResultsKeyboard() {
        return telegraf_1.Markup.inlineKeyboard([
            [telegraf_1.Markup.button.callback('üîç –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–æ—à—É–∫', 'search_articles')],
            [telegraf_1.Markup.button.callback('üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', 'categories')],
            [telegraf_1.Markup.button.callback('‚ùì –ó–∞–ø–∏—Ç–∞—Ç–∏ —É –ª—ñ–∫–∞—Ä—è', 'ask_doctor')]
        ]);
    }
    launch() {
        this.bot.launch();
        console.log('ü§ñ Article Search Bot started');
    }
    stop() {
        this.bot.stop();
    }
}
exports.ArticleSearchBot = ArticleSearchBot;
//# sourceMappingURL=bot1.js.map