import { Telegraf, Markup, Context } from 'telegraf';
import { Booking } from './types';

interface SessionData {
  step?: 'date' | 'time' | 'people';
  tempBooking?: Partial<Booking>;
  selectedDate?: string;
  selectedTime?: string;
}

export class BookingBot {
  private bot: Telegraf;
  private bookings: Map<string, Booking[]> = new Map();
  private sessions: Map<number, SessionData> = new Map();

  constructor(token: string) {
    this.bot = new Telegraf(token);
    this.setupHandlers();
  }

  private setupHandlers() {
    // Start command - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏ –∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å
    this.bot.start((ctx) => {
      this.showMainMenu(ctx);
    });

    // Callback queries
    this.bot.action('add_booking', async (ctx) => {
      await this.startBookingProcess(ctx);
    });

    this.bot.action('view_bookings', async (ctx) => {
      await this.showBookings(ctx);
    });

    this.bot.action(/^cancel_booking_(.+)$/, async (ctx) => {
      const bookingId = ctx.match[1];
      await this.cancelBooking(ctx, bookingId);
    });

    this.bot.action('back_to_main', async (ctx) => {
      await this.showMainMenu(ctx);
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    this.bot.action(/^select_date_(.+)$/, async (ctx) => {
      const date = ctx.match[1];
      await this.handleDateSelection(ctx, date);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    this.bot.action(/^select_time_(.+)$/, async (ctx) => {
      const time = ctx.match[1];
      await this.handleTimeSelection(ctx, time);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫
    this.bot.action(/^select_people_(\d+)$/, async (ctx) => {
      const people = parseInt(ctx.match[1]);
      await this.handlePeopleSelection(ctx, people);
    });

    // Text messages - —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω—ã, –≤—Å–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
  }

  private async showMainMenu(ctx: any) {
    const userId = ctx.from.id;
    const userBookings = this.getUserBookings(userId);

    let message = 'üçΩ *–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤*\n\n';

    if (userBookings.length > 0) {
      message += `üìã –£ –≤–∞—Å *${userBookings.length}* –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π\n\n`;
      message += 'üîç *–í–∞—à–∏ –±—Ä–æ–Ω–∏:*\n';
      userBookings.forEach((booking, index) => {
        message += `${index + 1}. üìÖ ${booking.date} –≤ ${booking.time}\n`;
        message += `   üë• ${booking.numberOfPeople} —á–µ–ª.\n`;
      });
      message += '\n';
    } else {
      message += 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π\n\n';
    }

    message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

    const keyboard = [
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω—å', 'add_booking')],
    ];

    if (userBookings.length > 0) {
      keyboard.push([Markup.button.callback('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏', 'view_bookings')]);
    }

    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } else {
      await ctx.replyWithMarkdown(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  }

  private async startBookingProcess(ctx: any) {
    const userId = ctx.from.id;
    
    this.sessions.set(userId, {
      step: 'date',
      tempBooking: {
        userId,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        status: 'pending'
      }
    });

    await this.showDateSelection(ctx);
  }

  private async showDateSelection(ctx: any) {
    const today = new Date();
    const dates = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 14 –¥–Ω–µ–π
    for (let i = 1; i <= 14; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateStr = date.toLocaleDateString('ru-RU', { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric' 
      });
      dates.push(dateStr);
    }

    const keyboard = [];
    for (let i = 0; i < dates.length; i += 2) {
      const row = [];
      row.push(Markup.button.callback(dates[i], `select_date_${dates[i]}`));
      if (dates[i + 1]) {
        row.push(Markup.button.callback(dates[i + 1], `select_date_${dates[i + 1]}`));
      }
      keyboard.push(row);
    }

    keyboard.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'back_to_main')]);

    await ctx.editMessageText(
      'üìÖ *–®–∞–≥ 1 –∏–∑ 4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:',
      {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  }

  private async handleDateSelection(ctx: any, date: string) {
    const userId = ctx.from.id;
    const session = this.sessions.get(userId);
    
    if (session) {
      session.tempBooking!.date = date;
      session.selectedDate = date;
      session.step = 'time';
      await this.showTimeSelection(ctx);
    }
  }

  private async showTimeSelection(ctx: any) {
    const times = [
      '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
      '12:00', '12:30', '13:00', '13:30', '14:00', '14:30',
      '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',
      '18:00', '18:30', '19:00', '19:30', '20:00', '20:30',
      '21:00', '21:30', '22:00'
    ];

    const keyboard = [];
    for (let i = 0; i < times.length; i += 3) {
      const row = [];
      row.push(Markup.button.callback(times[i], `select_time_${times[i]}`));
      if (times[i + 1]) row.push(Markup.button.callback(times[i + 1], `select_time_${times[i + 1]}`));
      if (times[i + 2]) row.push(Markup.button.callback(times[i + 2], `select_time_${times[i + 2]}`));
      keyboard.push(row);
    }

    keyboard.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'back_to_main')]);

    await ctx.editMessageText(
      'üïê *–®–∞–≥ 2 –∏–∑ 3: –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:',
      {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  }

  private async handleTimeSelection(ctx: any, time: string) {
    const userId = ctx.from.id;
    const session = this.sessions.get(userId);
    
    if (session) {
      session.tempBooking!.time = time;
      session.selectedTime = time;
      session.step = 'people';
      await this.showPeopleSelection(ctx);
    }
  }

  private async showPeopleSelection(ctx: any) {
    const peopleCounts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20];

    const keyboard = [];
    for (let i = 0; i < peopleCounts.length; i += 3) {
      const row = [];
      row.push(Markup.button.callback(`${peopleCounts[i]} —á–µ–ª.`, `select_people_${peopleCounts[i]}`));
      if (peopleCounts[i + 1]) row.push(Markup.button.callback(`${peopleCounts[i + 1]} —á–µ–ª.`, `select_people_${peopleCounts[i + 1]}`));
      if (peopleCounts[i + 2]) row.push(Markup.button.callback(`${peopleCounts[i + 2]} —á–µ–ª.`, `select_people_${peopleCounts[i + 2]}`));
      keyboard.push(row);
    }

    keyboard.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'back_to_main')]);

    await ctx.editMessageText(
      'üë• *–®–∞–≥ 3 –∏–∑ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:',
      {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  }

  private async handlePeopleSelection(ctx: any, people: number) {
    const userId = ctx.from.id;
    const session = this.sessions.get(userId);
    
    if (session) {
      session.tempBooking!.numberOfPeople = people;
      await this.completeBooking(ctx, session);
    }
  }


  private async completeBooking(ctx: any, session: SessionData) {
    const userId = ctx.from.id;
    const booking: Booking = {
      id: this.generateBookingId(),
      ...session.tempBooking as any,
      createdAt: new Date(),
      status: 'confirmed'
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
    const userBookings = this.bookings.get(userId.toString()) || [];
    userBookings.push(booking);
    this.bookings.set(userId.toString(), userBookings);

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    this.sessions.delete(userId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = 
      '‚úÖ *–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n' +
      'üìã *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n' +
      `üìÖ –î–∞—Ç–∞: ${booking.date}\n` +
      `üïê –í—Ä–µ–º—è: ${booking.time}\n` +
      `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${booking.numberOfPeople}\n` +
      `\nüÜî –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${booking.id}\n\n` +
      'üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é';

    await ctx.reply(confirmMessage, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
      ])
    });
  }

  private async showBookings(ctx: any) {
    const userId = ctx.from.id;
    const userBookings = this.getUserBookings(userId);

    if (userBookings.length === 0) {
      await ctx.editMessageText('üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π', {
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω—å', 'add_booking')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ])
      });
      return;
    }

    let message = 'üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏:*\n\n';

    const keyboard: any[] = [];
    userBookings.forEach((booking, index) => {
      message += `${index + 1}. *–ë—Ä–æ–Ω—å #${booking.id}*\n`;
      message += `üìÖ ${booking.date} –≤ ${booking.time}\n`;
      message += `üë• ${booking.numberOfPeople} —á–µ–ª–æ–≤–µ–∫\n`;
      message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(booking.status)} ${this.getStatusText(booking.status)}\n\n`;

      if (booking.status === 'confirmed' || booking.status === 'pending') {
        keyboard.push([Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å #${booking.id}`, `cancel_booking_${booking.id}`)]);
      }
    });

    keyboard.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'add_booking')]);
    keyboard.push([Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  private async cancelBooking(ctx: any, bookingId: string) {
    const userId = ctx.from.id;
    const userBookings = this.bookings.get(userId.toString()) || [];
    
    const booking = userBookings.find(b => b.id === bookingId);
    if (booking) {
      booking.status = 'cancelled';
      this.bookings.set(userId.toString(), userBookings);

      await ctx.answerCbQuery('‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
      await this.showBookings(ctx);
    } else {
      await ctx.answerCbQuery('‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  private getUserBookings(userId: number): Booking[] {
    return (this.bookings.get(userId.toString()) || [])
      .filter(b => b.status !== 'cancelled');
  }

  private validateDate(date: string): boolean {
    const regex = /^\d{2}\.\d{2}\.\d{4}$/;
    if (!regex.test(date)) return false;

    const [day, month, year] = date.split('.').map(Number);
    const dateObj = new Date(year, month - 1, day);
    
    return dateObj.getFullYear() === year &&
           dateObj.getMonth() === month - 1 &&
           dateObj.getDate() === day &&
           dateObj >= new Date();
  }

  private validateTime(time: string): boolean {
    const regex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;
    return regex.test(time);
  }


  private generateBookingId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
  }

  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'confirmed': return '‚úÖ';
      case 'pending': return '‚è≥';
      case 'cancelled': return '‚ùå';
      default: return '‚ùì';
    }
  }

  private getStatusText(status: string): string {
    switch (status) {
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case 'pending': return '–û–∂–∏–¥–∞–Ω–∏–µ';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  public launch() {
    this.bot.launch();
    console.log('ü§ñ Booking Bot started');
  }

  public stop() {
    this.bot.stop();
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  import('dotenv').then(dotenv => {
    dotenv.config();
    
    const BOT3_TOKEN = process.env.BOT3_TOKEN || '8455993287:AAEq_qVaOke4wzaQaxqXVuAmvjMixLEC-Fk';
    
    if (!BOT3_TOKEN) {
      console.error('‚ùå BOT3_TOKEN is required');
      process.exit(1);
    }
    
    const bot = new BookingBot(BOT3_TOKEN);
    bot.launch();
    
    console.log('üöÄ Bot3 (Table Booking) started successfully!');
    console.log(`üçΩ Bot 3 (Table Booking): @table_booking_bot`);
    
    // Graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Shutting down Bot3...');
      bot.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', () => {
      console.log('\nüõë Shutting down Bot3...');
      bot.stop();
      process.exit(0);
    });
  });
}