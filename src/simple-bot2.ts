import { Telegraf } from 'telegraf';
import { ApiService } from './services/api.service';

export class SimpleDoctorQuestionsBot {
  private bot: Telegraf;
  private apiService: ApiService;
  private doctorChannelId: string;

  constructor(token: string, apiBaseUrl: string, doctorChannelId: string) {
    this.bot = new Telegraf(token);
    this.apiService = new ApiService(apiBaseUrl);
    this.doctorChannelId = doctorChannelId;
    this.setupHandlers();
  }

  private setupHandlers() {
    // Start command
    this.bot.start((ctx) => {
      const welcomeMessage = `
üë©‚Äç‚öïÔ∏è *–ë–æ—Ç –¥–ª—è –ø–∏—Ç–∞–Ω—å –¥–æ –ª—ñ–∫–∞—Ä—è*

–¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö –ø–µ—Ä–µ–¥–∞—á—ñ –ª—ñ–∫–∞—Ä—é –†—É—Å–ª–∞–Ω—ñ –ú–æ—Å–∫–∞–ª–µ–Ω–∫–æ.

üìã *–§—É–Ω–∫—Ü—ñ—ó:*
‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∏—Ç–∞–Ω—å –≤ –∫–∞–Ω–∞–ª –ª—ñ–∫–∞—Ä—è
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∏—Ç–∞–Ω—å

üîó *–ü–æ–≤'—è–∑–∞–Ω–∏–π –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º:* @moskalenko_helper_bot
      `;

      ctx.replyWithMarkdown(welcomeMessage);
    });

    // Handle questions from bot1
    this.bot.on('text', async (ctx) => {
      const message = ctx.message.text;
      
      // Check if this is a forwarded question from bot1
      if (message.includes('‚ùì –ù–û–í–ï –ü–ò–¢–ê–ù–ù–Ø –í–Ü–î –ü–ê–¶–Ü–Ñ–ù–¢–ê')) {
        await this.processIncomingQuestion(ctx, message);
      } else {
        // Regular text message
        await ctx.reply('üë©‚Äç‚öïÔ∏è –¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @moskalenko_helper_bot –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏—Ç–∞–Ω—å.');
      }
    });
  }

  public async sendQuestionToDoctor(user: any, question: string, questionId: string) {
    try {
      const userInfo = this.formatUserInfo(user);
      const timestamp = new Date().toLocaleString('uk-UA');
      
      const message = `
‚ùì *–ù–û–í–ï –ü–ò–¢–ê–ù–ù–Ø –í–Ü–î –ü–ê–¶–Ü–Ñ–ù–¢–ê*

üÜî *ID –ø–∏—Ç–∞–Ω–Ω—è:* ${questionId}
üìÖ *–î–∞—Ç–∞:* ${timestamp}

üë§ *–ü–∞—Ü—ñ—î–Ω—Ç:*
${userInfo}

‚ùì *–ü–∏—Ç–∞–Ω–Ω—è:*
${question}

üìä *–°—Ç–∞—Ç—É—Å:* –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

üí¨ *–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:* –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      `;

      // Send to doctor channel
      await this.bot.telegram.sendMessage(this.doctorChannelId, message, {
        parse_mode: 'Markdown'
      });

      console.log(`Question ${questionId} sent to doctor channel`);
      return true;
    } catch (error) {
      console.error('Error sending question to doctor:', error);
      return false;
    }
  }

  private async processIncomingQuestion(ctx: any, message: string) {
    // This method handles questions forwarded from bot1
    console.log('Processing incoming question:', message);
  }

  private formatUserInfo(user: any): string {
    let info = `üÜî ID: ${user.id}\n`;
    
    if (user.first_name) {
      info += `üë§ –Ü–º'—è: ${user.first_name}`;
      if (user.last_name) info += ` ${user.last_name}`;
      info += '\n';
    }
    
    if (user.username) {
      info += `üì± Username: @${user.username}\n`;
    }
    
    return info;
  }

  public launch() {
    this.bot.launch();
    console.log('ü§ñ Simple Doctor Questions Bot started');
  }

  public stop() {
    this.bot.stop();
  }
}
